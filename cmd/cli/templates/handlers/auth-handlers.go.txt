package handlers

import (
	"bytes"
	"crypto/sha256"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"myapp/data"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/CloudyKit/jet/v6"
	"github.com/go-chi/chi/v5"
	"github.com/gorilla/sessions"
	"github.com/markbates/goth"
	"github.com/markbates/goth/gothic"
	"github.com/markbates/goth/providers/github"
	"github.com/markbates/goth/providers/google"
	"github.com/youngjae-lim/gosnel/mailer"
	"github.com/youngjae-lim/gosnel/urlsigner"
)

func (h *Handlers) UserLogin(w http.ResponseWriter, r *http.Request) {
	err := h.render(w, r, "login", nil, nil)
	if err != nil {
		h.App.ErrorLog.Println("error rendering:", err)
	}

}

func (h *Handlers) PostUserLogin(w http.ResponseWriter, r *http.Request) {
	err := r.ParseForm()
	if err != nil {
		w.Write([]byte(err.Error()))
		return
	}

	email := r.Form.Get("email")
	password := r.Form.Get("password")

	user, err := h.Models.Users.GetByEmail(email)
	if err != nil {
		w.Write([]byte(err.Error()))
		return
	}

	matches, err := user.PasswordMatches(password)
	if err != nil {
		w.Write([]byte("Error validating password"))
		return
	}

	if !matches {
		w.Write([]byte("Invalid password"))
		return
	}

	// Did the user check 'Remember me'?
	if r.Form.Get("remember") == "remember" {
		randomString := h.randomString(12)
		hasher := sha256.New()
		_, err := hasher.Write([]byte(randomString))
		if err != nil {
			h.App.ErrorStatus(w, http.StatusBadRequest)
			return
		}

		sha := base64.URLEncoding.EncodeToString(hasher.Sum(nil))
		rt := data.RememberToken{}
		err = rt.InsertToken(user.ID, sha)
		if err != nil {
			h.App.ErrorStatus(w, http.StatusBadRequest)
			return
		}

		// set a cookie
		expire := time.Now().Add(365 * 24 * 60 * 60 * time.Second)
		cookie := http.Cookie{
			Name:     fmt.Sprintf("_%s_remember", h.App.AppName),
			Value:    fmt.Sprintf("%d|%s", user.ID, sha),
			Path:     "/",
			Expires:  expire,
			HttpOnly: true,
			Domain:   h.App.Session.Cookie.Domain,
			MaxAge:   315350000, // a year in seconds
			Secure:   h.App.Session.Cookie.Secure,
			SameSite: http.SameSiteStrictMode,
		}
		http.SetCookie(w, &cookie)
		// save the hash in session
		h.sessionPut(r.Context(), "remember_token", sha)
	}

	h.sessionPut(r.Context(), "userID", user.ID)

	http.Redirect(w, r, "/", http.StatusSeeOther)
}

func (h *Handlers) Logout(w http.ResponseWriter, r *http.Request) {
	// delete the remember token record in db if it exists
	if h.sessionHas(r.Context(), "remember_token") {
		rt := data.RememberToken{}
		_ = rt.DeleteToken(h.sessionGetString(r.Context(), "remember_token"))
	}

	// logout a user from the social login manually, not using gothic.Logout()
	h.socialLogout(w, r)

	// reset the cookie with an empty value
	newCookie := http.Cookie{
		Name:     fmt.Sprintf("_%s_remember", h.App.AppName),
		Value:    "",
		Path:     "/",
		Expires:  time.Now().Add(-100 * time.Hour),
		HttpOnly: true,
		Domain:   h.App.Session.Cookie.Domain,
		MaxAge:   -1,
		Secure:   h.App.Session.Cookie.Secure,
		SameSite: http.SameSiteStrictMode,
	}
	http.SetCookie(w, &newCookie)

	h.sessionRenew(r.Context())
	h.sessionRemove(r.Context(), "userID")
	h.sessionRemove(r.Context(), "remember_token")
	h.sessionDestroy(r.Context())
	h.sessionRenew(r.Context())

	http.Redirect(w, r, "/users/login", http.StatusSeeOther)
}

func (h *Handlers) Forgot(w http.ResponseWriter, r *http.Request) {
	err := h.render(w, r, "forgot", nil, nil)
	if err != nil {
		h.App.ErrorLog.Println("Error rendering: ", err)
		h.App.Error500(w, r)
	}
}

func (h *Handlers) PostForgot(w http.ResponseWriter, r *http.Request) {
	// parse a form
	err := r.ParseForm()
	if err != nil {
		h.App.ErrorStatus(w, http.StatusBadRequest)
		return
	}

	// verify that supplied email exists
	var u *data.User
	email := r.Form.Get("email")
	u, err = u.GetByEmail(email)
	if err != nil {
		h.App.ErrorStatus(w, http.StatusBadRequest)
		return
	}

	// create a link to password reset form
	link := fmt.Sprintf("%s/users/reset-password?email=%s", h.App.Server.URL, email)

	sign := urlsigner.Signer{
		Secret: []byte(h.App.EncryptionKey),
	}

	// sign the link
	signedLink := sign.GenerateTokenFromString(link)

	h.App.InfoLog.Println("Signed link is:", signedLink)

	// email the message
	var data struct {
		Link string
	}
	data.Link = signedLink

	msg := mailer.Message{
		From:     "admin@example.com",
		To:       u.Email,
		Subject:  "Password reset",
		Template: "password-reset",
		Data:     data,
	}

	h.App.Mail.Jobs <- msg
	res := <-h.App.Mail.Results
	if res.Error != nil {
		h.App.ErrorStatus(w, http.StatusBadRequest)
		return
	}

	// redirect the user
	http.Redirect(w, r, "/users/login", http.StatusSeeOther)
}

func (h *Handlers) ResetPasswordForm(w http.ResponseWriter, r *http.Request) {
	// get form values
	email := r.URL.Query().Get("email")
	theURL := r.RequestURI
	testURL := fmt.Sprintf("%s%s", h.App.Server.URL, theURL)

	// validate the url
	signer := urlsigner.Signer{
		Secret: []byte(h.App.EncryptionKey),
	}

	valid := signer.VerifyToken(testURL)
	if !valid {
		h.App.ErrorLog.Print("Invalid url")
		h.App.ErrorUnauthorized(w, r)
		return
	}

	// make sure the url(password reset link) is not expired
	expired := signer.IsExpired(testURL, 60)
	if expired {
		h.App.ErrorLog.Print("Link expired")
		h.App.ErrorUnauthorized(w, r)
		return
	}

	// encrypt the email
	encryptedEmail, _ := h.encrypt(email)

	vars := make(jet.VarMap)
	vars.Set("email", encryptedEmail)

	// display password reset form
	err := h.render(w, r, "reset-password", vars, nil)
	if err != nil {
		return
	}
}

func (h *Handlers) PostResetPassword(w http.ResponseWriter, r *http.Request) {
	// parse the form
	err := r.ParseForm()
	if err != nil {
		h.App.Error500(w, r)
		return
	}

	// get and decrypt the email
	email, err := h.decrypt(r.Form.Get("email"))
	if err != nil {
		h.App.Error500(w, r)
		return
	}

	// get the user
	var u data.User
	user, err := u.GetByEmail(email)
	if err != nil {
		h.App.Error500(w, r)
		return
	}

	// reset the password
	err = user.ResetPassword(user.ID, r.Form.Get("password"))
	if err != nil {
		h.App.Error500(w, r)
		return
	}

	// redirect the user
	h.App.Session.Put(r.Context(), "flash", "Password reset. You can now log in.")
	http.Redirect(w, r, "/users/login", http.StatusSeeOther)
}

func (h *Handlers) InitSocialAuth() {
	scope := []string{"user"}
	// gscope
	gScope := []string{"email", "profile"}

	goth.UseProviders(
		github.New(os.Getenv("GITHUB_KEY"), os.Getenv("GITHUB_SECRET"), os.Getenv("GITHUB_CALLBACK"), scope...),
		google.New(os.Getenv("GOOGLE_KEY"), os.Getenv("GOOGLE_SECRET"), os.Getenv("GOOGLE_CALLBACK"), gScope...),
	)

	// by default, gothic uses a CookieStore from the gorilla/sessions package to store session data
	key := os.Getenv("KEY") // session secret
	maxAge := 86400 * 30    // 30 days
	isProd := false         // set to true when serving over https

	// set CookieStore
	st := sessions.NewCookieStore([]byte(key))
	st.MaxAge(maxAge)
	st.Options.Path = "/"
	st.Options.HttpOnly = true
	st.Options.Secure = isProd // only in development
}

func (h *Handlers) SocialLogin(w http.ResponseWriter, r *http.Request) {
	provider := chi.URLParam(r, "provider")
	h.App.Session.Put(r.Context(), "social_provider", provider)
	h.InitSocialAuth()

	if _, err := gothic.CompleteUserAuth(w, r); err == nil {
		// user is already logged in, so just redirect to home page
		http.Redirect(w, r, "/", http.StatusSeeOther)
	} else {
		// attempt social login
		gothic.BeginAuthHandler(w, r)
	}
}

func (h *Handlers) SocialMediaCallBack(w http.ResponseWriter, r *http.Request) {
	h.InitSocialAuth()

	// get a user info from the provider
	socialUser, err := gothic.CompleteUserAuth(w, r)
	if err != nil {
		h.App.Session.Put(r.Context(), "error", err.Error())
		http.Redirect(w, r, "/users/login", http.StatusSeeOther)
		return
	}

	var u data.User
	var testUser *data.User

	// look up a user using the social email address
	testUser, err = u.GetByEmail(socialUser.Email)

	// if the social email does not exist in the database, create one
	if err != nil {
		log.Println(err)
		provider := h.App.Session.Get(r.Context(), "social_provider").(string)

		// we don't have a user, so add one
		var newUser data.User
		if provider == "github" { // github
			exploded := strings.Split(socialUser.Name, " ")
			newUser.FirstName = exploded[0]
			if len(exploded) == 2 { // no middle name
				newUser.LastName = exploded[1]
			} else if len(exploded) > 2 { // if there is a middle name or more
				// use whatever name provided was as the last elemenet in the exploded slice as a last name
				newUser.LastName = exploded[len(exploded)-1]
			}
		} else { // google
			newUser.FirstName = socialUser.FirstName
			newUser.LastName = socialUser.LastName
		}

		// set User info
		newUser.Email = socialUser.Email
		newUser.Active = 1
		newUser.Password = h.randomString(20)
		newUser.CreatedAt = time.Now()
		newUser.UpdatedAt = time.Now()

		// insert the user to the database
		_, err := newUser.Insert(newUser)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		// now that we inserted the new user, try to look up the social email address again in the database
		// and assign it to testUser
		testUser, err = u.GetByEmail(socialUser.Email)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
	}

	h.App.Session.Put(r.Context(), "userID", testUser.ID)
	h.App.Session.Put(r.Context(), "social_token", socialUser.AccessToken)
	h.App.Session.Put(r.Context(), "social_email", socialUser.Email)

	http.Redirect(w, r, "/", http.StatusSeeOther)
}

func (h *Handlers) socialLogout(w http.ResponseWriter, r *http.Request) {
	provider, ok := h.App.Session.Get(r.Context(), "social_provider").(string)
	if !ok {
		return
	}

	// call the appropriate api for our provider and revoke the auth token.
	// Each provider has different logic for doing this (if it exists at all)
	switch provider {
	case "github":
		clientID := os.Getenv("GITHUB_KEY")
		clientSecret := os.Getenv("GITHUB_SECRET")

		token := h.App.Session.Get(r.Context(), "social_token").(string)

		var payload struct {
			AccessToken string `json:"access_token"`
		}
		payload.AccessToken = token

		jsonReq, _ := json.Marshal(payload)
		req, err := http.NewRequest(http.MethodDelete, fmt.Sprintf("https://%s:%s@api.github.com/applications/%s/grant", clientID, clientSecret, clientID), bytes.NewBuffer(jsonReq))
		if err != nil {
			h.App.ErrorLog.Println(err)
			return
		}

		client := &http.Client{}
		_, err = client.Do(req)
		if err != nil {
			h.App.ErrorLog.Println("Error logging out of Github", err)
			return
		}

	case "google":
		token := h.App.Session.Get(r.Context(), "social_token").(string)
		_, err := http.PostForm(fmt.Sprintf("https://accounts.google.com/o/oauth2/revoke?%s", token), nil)
		if err != nil {
			h.App.ErrorLog.Println("Error logging out of Google:", err)
			return
		}

	}

}
